---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTVhXMk5IVHUwN3o0NTFFSC9iV3owakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURRd09EQTJNVFF5TkZvWApEVEl5TURRd09EQTJNVFF5TkZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTTRDcmtvYzFma0o5L1lBdW45UVpVdVYKMXRlcUQ3amRPbTFiNVQ3dk9FUDFFdHRYUU1DWk84cE84bGxYUnJ1U0ZPYWFwYWZrOVFudzltM2pxS2MydzA0eQpNMHRmR2U1MXd0SWVlMUluNXovcWdGd1Vyd0Jvc0pzelV6WG50eFBVRUt2WDVjK3RvQkJmN3JoTFVSOWZjRlpUClBCbHdzeUIzSm1SOTI5c2MzY0ZBdWQxdW5aRmFwNXpqVjQ4VmFWSnVJZDQwQzVOREswcHE1UzNwOXlMK25oMnAKc0VkbDBqc2o5c0JkUUorVU9jTFhmdTV1ZVUwMytnQkI1QlIxTmI4V0JLcVpLV0RFK1MwYlZDZkp6MlExb2drVApLQ08vZDM1bmRXM3NZbHdtZW1ab3FXQitvSzg1NjlZQlpEZ2NzeDU5MWdpcUJBWTFqVlY1WXpOZC8rMlljMWtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDOVdlaGlNMS93YVFIRWNYdmJhTGdxK1FrRG9pMm9RClJaRFdMa0E5VWMvSU0yYlZFWmJJVm03TklZbE1EaURkSHZ0MC9SUlRncmJ6Kzc4QW8vQm9HQmV0MEhJckNwcGgKcEJRbElkZlkvM0pLMHBubDF0T05ZNWpRbnZ0SXowRmhrRWJqUzhnY3pwdG1WeHhHZ1BvN2oweWpPbUxJZFdENwp0WWpaUFduclBacXp3Z1puSklQdFdiTklHdWZkejliemYzK2UvTmtTZjh5L243NWdDanNRdFFZdzQ0ZW9ONTlOCkExajZoQWZpL1BYUExDVW1qdm1HQ1ZQdGcweEx1Yyt1S0xqNjZaRzVWUXhHRlEzQUF6YklNV3FETytObXBGTzcKNksyTndHa2cyY2JqZnZQdG15dkF5M3R5ZWdsaHB5WjcraEJKV2RsYkFCaHlZSzhnRHFtV2x3QT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBemdLdVNoelYrUW4zOWdDNmYxQmxTNVhXMTZvUHVOMDZiVnZsUHU4NFEvVVMyMWRBCndKazd5azd5V1ZkR3U1SVU1cHFscCtUMUNmRDJiZU9vcHpiRFRqSXpTMThaN25YQzBoNTdVaWZuUCtxQVhCU3YKQUdpd216TlROZWUzRTlRUXE5Zmx6NjJnRUYvdXVFdFJIMTl3VmxNOEdYQ3pJSGNtWkgzYjJ4emR3VUM1M1c2ZAprVnFubk9OWGp4VnBVbTRoM2pRTGswTXJTbXJsTGVuM0l2NmVIYW13UjJYU095UDJ3RjFBbjVRNXd0ZCs3bTU1ClRUZjZBRUhrRkhVMXZ4WUVxcGtwWU1UNUxSdFVKOG5QWkRXaUNSTW9JNzkzZm1kMWJleGlYQ1o2Wm1pcFlINmcKcnpucjFnRmtPQnl6SG4zV0NLb0VCaldOVlhsak0xMy83Wmh6V1FJREFRQUJBb0lCQVFDNVJGdnR0c1VQZEZHVQo0TTdYMUR0a29GcFlGVTZTV0JKRmF4RmRhZEZWL0Q1N0Y1cmFHblJVMm03RXZlS1VxU2syd2ZrY1pxR2YwUjR0CmNVR3BMMnl4RkNCaE5pT2grakc4dVVENmYzeE9WTndlODFMMnNTK3lRNVFmdEVWSEJiNEFiT2Ixd0JWazVJRlIKS0JyS2RoQVc4ai9vT1J3K3BDalkwdjgzckZ3WmdEaU1GMk1QNmJKdlptcHNad0hpdk0zbTdKQWNBdzVBekVSYgpkZXFBbWJtU2x4eEZpVEUxWG9IcUhROUQ4TnVBaVk5ODZudHpyVTR0NXpsV05ublpvTzluNkhWTzhqS3hNRXg2CkN3VEJUNWVtWVhRMnZPTkwyaCt6V1RBSE5mV1cvT0EyRFFWZmlML2hoQzFSdHZxUHFUQlN1TUQ5QVNRVmhIWnMKQ09KQTBXT2hBb0dCQVBISG4rZXV3Q2hqNENGVlBYd1AyUTNSeEhPS1lwS0RwaGQ0KzdoRVYzVVNPZ3BkVUxHdApaYjV6dmhiMnkwM0Exc0N5UzMzRWFQSFNhazFBL2diNDIxWUtUOHpDVUtmNnVYQkJPc3IyUWlFN0NkdFhraXFlCmZoMmt6NmIzTnFhc2hGWkdMSmZ4RGVFZ3JiTGxJVkdhTXc2MG9TN3RFa3NnbnZCT2hBUGhHUWdWQW9HQkFOb2cKZmkwVmRwRE05WEdMNis2U3JLS0xUeFVReHd3QXNTcHFwNkRib1AzaXhOUjdyQUJiVysvdTRBTzhYWEtWRGEyVwpueDZhZ0VSRmFhN3ZaM0VCR1NkMXZ4ZTdubnhrUnRsSWs4em9xZUEzSG92SmI0eEZGWHZtYjU1SU42UEpZUU9UCnZrbGE1VGZ1b3F3UGE4N2dOaHA1QzZndjNOUGVhaEtqaHc1cUpXczFBb0dBRzh0bEdJOUFTK1JmYWJXUTRlZzQKZlp3MXgwcUxWbWlIK1g3UkFUZnFEZTFRZXN5TGNFR014cjRyaGh4TTl0MUtVdENzV1FMeFJZdDQ2UFNsdjB0dwplNDJuNnRRVHpadkhJWjUrRWNNSml5UnNWNmpUaHM2OWxNN1RpRkEzR2lZTytKUU1vRkwzMDMrY09FcWE3L1NZCkZnS3gzT0VvRHpicXpwbFlGOUlTdkprQ2dZQk91VzF3amcrRndVTlFZTVNkRFRqYlRWWVViMEszbFVSYjM3UnkKUFBKRXoyUmtuK0g3R3YzNmdZYytNZXkwSHhHWnRnUGx3ck5LY0picytTQ25TMU10eDdSWk4zREN5bG83cjVNUQpZR1IzTk0yRWZBWVRaUmVVNlIwZHpraXVoMDdKUUxocnR5K0ZXVTVDdFNvZXR4TXZ5TUlwU0dUMTNvNy8vUjhRClY4VDdoUUtCZ1FDU0ZMdFkvUCtmT3hNNTZGTTR5TkdtV1FTbVVRM1RTUmZ6MUlFNE5ha3haRnVtaUVNR1J6bjQKMGlFTWxERUEzOEJhS2lsL2xEMHVWSXRqeHI0K3Y5WGxyK1dyaEFQdlowKzg1SDBZN0NsdFl0V1k5ODhiWlAxNApwZzFxbVAwOWViSVpkdTlSUURrc3U0NERyTExKOHkrbW1PL0U4M1hXV3YyblVVQXJaTjJtanc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTVhXMk5IVHUwN3o0NTFFSC9iV3owakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURRd09EQTJNVFF5TkZvWApEVEl5TURRd09EQTJNVFF5TkZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTTRDcmtvYzFma0o5L1lBdW45UVpVdVYKMXRlcUQ3amRPbTFiNVQ3dk9FUDFFdHRYUU1DWk84cE84bGxYUnJ1U0ZPYWFwYWZrOVFudzltM2pxS2MydzA0eQpNMHRmR2U1MXd0SWVlMUluNXovcWdGd1Vyd0Jvc0pzelV6WG50eFBVRUt2WDVjK3RvQkJmN3JoTFVSOWZjRlpUClBCbHdzeUIzSm1SOTI5c2MzY0ZBdWQxdW5aRmFwNXpqVjQ4VmFWSnVJZDQwQzVOREswcHE1UzNwOXlMK25oMnAKc0VkbDBqc2o5c0JkUUorVU9jTFhmdTV1ZVUwMytnQkI1QlIxTmI4V0JLcVpLV0RFK1MwYlZDZkp6MlExb2drVApLQ08vZDM1bmRXM3NZbHdtZW1ab3FXQitvSzg1NjlZQlpEZ2NzeDU5MWdpcUJBWTFqVlY1WXpOZC8rMlljMWtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFDOVdlaGlNMS93YVFIRWNYdmJhTGdxK1FrRG9pMm9RClJaRFdMa0E5VWMvSU0yYlZFWmJJVm03TklZbE1EaURkSHZ0MC9SUlRncmJ6Kzc4QW8vQm9HQmV0MEhJckNwcGgKcEJRbElkZlkvM0pLMHBubDF0T05ZNWpRbnZ0SXowRmhrRWJqUzhnY3pwdG1WeHhHZ1BvN2oweWpPbUxJZFdENwp0WWpaUFduclBacXp3Z1puSklQdFdiTklHdWZkejliemYzK2UvTmtTZjh5L243NWdDanNRdFFZdzQ0ZW9ONTlOCkExajZoQWZpL1BYUExDVW1qdm1HQ1ZQdGcweEx1Yyt1S0xqNjZaRzVWUXhHRlEzQUF6YklNV3FETytObXBGTzcKNksyTndHa2cyY2JqZnZQdG15dkF5M3R5ZWdsaHB5WjcraEJKV2RsYkFCaHlZSzhnRHFtV2x3QT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 36d9aa4ccf09441e317ee3ac979f0a87d3862b7ac79142ec262b7a93779852e2
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRTGN0azduL2hSNXFSQk5hS0h3Y2FCakFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURRdwpPREEyTVRReU5Gb1hEVEl5TURRd09EQTJNVFF5TkZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1HOGdXT1JmZTdVLzBUcC8zR2VwV2ZhbVJKdmx4dk9kNHVBRXNEMndXdXg3dVlHSWRoR3N4QU5DdElPT3FIQgpDSjV4NlJ6MmhQTVdMbms1MFV4bE1BVHdneVJwUlJBUjlhNi9GM2dsOW12NE5Ecm4wdFV2NW9sR1dXM0VtSkh5CkZTSnBzYkdCcXltQldoU25jU1JDMjIzdTk1aytkWVFPSWplcnovSzV1Mk5RWnYybFpmNUlMYit4S1hNbGhHMm0KOThKL3kvUHhBTXUwVE14U2tLZFVFdGtTc3JZUFE3YlBVTWU5VUxOeFVGVlZ6OTROSElPYWgrUXdyYTVNai8zKwoyVXhObC9iVzlab0tHcFYrYnBwZFpWWXBBdDdSOEEyN1JKSVFkQlRWeVQxSXV6LzBhbVlKZUMrODI2bWwyditmClNzTk9QSFloMWJRYkRCeG5zMjlURHFzQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTG5XaEJkT0F4dUFBRWp0aGtpMjkzeTdnRTFyVzJFbEpYKzBWR011NzdOb2VtdzZScE02MG9iMmxuQ2gKRUFTYVRjcVNKU3NWbWNuNUdpakFSVVJKdU9lRlZyOXpOQVd2VUtpd3pZRmpIbnkwM010L0FmcWR6TTFIOHZIcQp6WFZmMHJPR1BQeGVtRXJDakgyM09nQ0lsS3lsTjNqcE1Rc3JXOU5kVE5KRmd3MUVqNHBjcjQ4eFo4TWtXcnBaCll2OWZqQzdQSG0zK3BJMVJXOHIrSU5IVmw5YVRZSHFFdm9MMFhMcW82TzV1NzFJc2tqVll1bEY2U3plUXozYkUKUGhYZ1V5SEhZT3FhQXkzVkN4MFdraCtERm0ycWtWczdKaXE0bUNQTDdnUm5ZSDVhYUlDeDU0VmpJRHNoYXBGQwo3OVZoQzVOb2xjTzRXckN3ZUIwUWEybEtZL1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd2J5Qlk1Rjk3dFQvUk9uL2NaNmxaOXFaRW0rWEc4NTNpNEFTd1BiQmE3SHU1Z1loCjJFYXpFQTBLMGc0Nm9jRUlubkhwSFBhRTh4WXVlVG5SVEdVd0JQQ0RKR2xGRUJIMXJyOFhlQ1gyYS9nME91ZlMKMVMvbWlVWlpiY1NZa2ZJVkltbXhzWUdyS1lGYUZLZHhKRUxiYmU3M21UNTFoQTRpTjZ2UDhybTdZMUJtL2FWbAova2d0djdFcGN5V0ViYWIzd24vTDgvRUF5N1JNekZLUXAxUVMyUkt5dGc5RHRzOVF4NzFRczNGUVZWWFAzZzBjCmc1cUg1REN0cmt5UC9mN1pURTJYOXRiMW1nb2FsWDV1bWwxbFZpa0MzdEh3RGJ0RWtoQjBGTlhKUFVpN1AvUnEKWmdsNEw3emJxYVhhLzU5S3cwNDhkaUhWdEJzTUhHZXpiMU1PcXdJREFRQUJBb0lCQUc1dzk1RzdMdjhualIzTQpCMExPSFp6R2tOeGhvTkxKTUh6bDFjc0szOWgwNXF0YWM1REhQT3k1Z3FHY1d2QTdDcDdJY1F1QnZPaVdqSWV1CjNoR2UzWER6YXM4bTg2ZmxsUmk0OXJnWGJCTEF1NFdaQWlkbDF4WUtkSkNPc2lzQXhldUlOVFBycDVkUmxmaVEKTzM5Z1haYWQwNmdZWXdXVXlRelRkUWY1dVVrelhaNDBUUFBLak91Z3FHVjlNR1dzUGZOTlBIem0yRFNVd3o5RQpmWUVwRmJ0T2FtK2NocVVqVUxnajVabnMxM0ZyR2MvNUJFL3YweUZpcTFsQytFQ1pocjhkd3hSUUJNclB1THQzClRyRzZvaDFVVVp2SVZwNUQ2MFJtWWE2UUkwSFVJWXcwbGlKSzBpUnRxcG9GZCtLUXcxSFFObzZwQTNiNit0d2oKQjVMNjJBRUNnWUVBOHlwRXZiZzNrNFFCTUJPenE2aXJwc3dNSGRscnNmWEszSFVQd1FjdXFPN2lHUTQ0bFZPZgpSVjhOVFdUMVNRaWprMkVuTkttdnJRYjkxZHJsQWYxdEVianh6bE4xSHV2MU5iNVVFOUFZZVZHLzVWdTFQRHdRCkdwKzhtNVRXUFFrODcvYWllMDlWQUZmMHBmejlpSU1McjhwcDRWc3gvdXVsOFpHQTNZN1BIK3NDZ1lFQXkvWlcKbXArV0JrcTVZQTlETmd6UStOR0ptOVdsZ1lUTlVZRnE5YjE3d25oNEN5UnlibGxBanpqMjJtMWlsV1pWYUVReQpadmUxeFNYWTlzVmg4L0J3MXFWcTV3R2wzREo5cm41NFBIZjZjK2xKVkFBamU3L3g3R0pCS25sTVI4Ym9XOGpJCjMza215YjhCY2tBZUR1VlVUaG1LRVhBRWI1Mlp0YUR6OTJKcTNFRUNnWUVBMnVHQlh3VWpnYldoSEJXZjlUU3UKemtWOTRxQ0RRSDF2VFdKUisvN3JFVVYyWC9kZEY0MWVJS09lNWJ1cXowTG5leEpJcUM3VjQzb1hveGlXYTJRagplWUJ3cUxpWEJHNkJHdzludnkzaDJkS3NXVmhqbXdTMXVrRnZGTnkwdTl4RTdmdWo1anRTMkN4VUc5WE9vY0xVCkVqaXhkaGtRdDlhR1dSd1FVMTdwTW1FQ2dZQlN3WFdzTVRvdS9WeXZ4Q0dTS2FzVWVmaHFtVW9ZL2loTWZNVkkKUmdTVUNFczB3aW9INmdETzI5OFZDekxueVdpMzhJdSt5WjBnQzlZM2Npam5VRlNJVXYvSUVSd1o5d2FWcVV6aAp4QkNEdlZENlcwQUtjdndXM0ZyeWY5cmFlTE5Jb25RV2NGS3pvdU5VVnYyYkw2T0FPTTZUZXE3aUZzRUtOKzhsCkhmS2J3UUtCZ1FDSFJROGNqNjhoc21lQStOclJ6N1Bxa1B3Q3hLUHA2cFZWMmhkVDFQRjE0YUxKOU42U0hIc0wKamNnbXBuMDk0RHFHRldhSCtwS0tiTzgyQlFWS2VPL3FHVVRLOU9GejJJbzBDUkFkeCtQTkJjNitZQk1vOG0rTQpvTlpZb1JJV2FhcDVzMFNNckhqNlVrdVBmc0doSDhranNSRDlMME4wZGJucXF5eGJOQ3F2WUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRTGN0azduL2hSNXFSQk5hS0h3Y2FCakFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURRdwpPREEyTVRReU5Gb1hEVEl5TURRd09EQTJNVFF5TkZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1HOGdXT1JmZTdVLzBUcC8zR2VwV2ZhbVJKdmx4dk9kNHVBRXNEMndXdXg3dVlHSWRoR3N4QU5DdElPT3FIQgpDSjV4NlJ6MmhQTVdMbms1MFV4bE1BVHdneVJwUlJBUjlhNi9GM2dsOW12NE5Ecm4wdFV2NW9sR1dXM0VtSkh5CkZTSnBzYkdCcXltQldoU25jU1JDMjIzdTk1aytkWVFPSWplcnovSzV1Mk5RWnYybFpmNUlMYit4S1hNbGhHMm0KOThKL3kvUHhBTXUwVE14U2tLZFVFdGtTc3JZUFE3YlBVTWU5VUxOeFVGVlZ6OTROSElPYWgrUXdyYTVNai8zKwoyVXhObC9iVzlab0tHcFYrYnBwZFpWWXBBdDdSOEEyN1JKSVFkQlRWeVQxSXV6LzBhbVlKZUMrODI2bWwyditmClNzTk9QSFloMWJRYkRCeG5zMjlURHFzQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTG5XaEJkT0F4dUFBRWp0aGtpMjkzeTdnRTFyVzJFbEpYKzBWR011NzdOb2VtdzZScE02MG9iMmxuQ2gKRUFTYVRjcVNKU3NWbWNuNUdpakFSVVJKdU9lRlZyOXpOQVd2VUtpd3pZRmpIbnkwM010L0FmcWR6TTFIOHZIcQp6WFZmMHJPR1BQeGVtRXJDakgyM09nQ0lsS3lsTjNqcE1Rc3JXOU5kVE5KRmd3MUVqNHBjcjQ4eFo4TWtXcnBaCll2OWZqQzdQSG0zK3BJMVJXOHIrSU5IVmw5YVRZSHFFdm9MMFhMcW82TzV1NzFJc2tqVll1bEY2U3plUXozYkUKUGhYZ1V5SEhZT3FhQXkzVkN4MFdraCtERm0ycWtWczdKaXE0bUNQTDdnUm5ZSDVhYUlDeDU0VmpJRHNoYXBGQwo3OVZoQzVOb2xjTzRXckN3ZUIwUWEybEtZL1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 823e8887a00effac7d7d2bd760e782f882681adb646b6a6e658a9b7dfda2faad
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.0
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.0
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.0
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
