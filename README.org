#+TITLE: Martin's Home Automation Project
#+AUTHOR: Martin Foot
#+STARTUP: showall
#+OPTIONS: ^:nil

This repository is my private smart home configuration. It contains the GitOps configuration for my home [[https://k3s.io/][k3s]] cluster running [[https://fluxcd.io/][Flux CD]], including [[https://www.home-assistant.io/][Home Assistant]] for centralised control and automation of my smart devices.

The main components powering my house are:
- A Raspberry Pi 4 2Gb with a USB-C Ethernet adapter running [[https://openwrt.org/start][OpenWrt]] as my router and VPN client
- [[https://store.ui.com/collections/unifi-network-routing-switching/products/unifi-dream-machine][UniFi Dream Machine]] as a switch and wireless access point
- [[https://www.ui.com/unifi-switching/unifi-switch-8-150w/][UniFi Switch 8 150W]] as a secondary switch providing PoE and additional ports
- [[https://global.download.synology.com/download/Document/Hardware/DataSheet/DiskStation/16-year/DS216j/enu/Synology_DS216j_Data_Sheet_enu.pdf][Synology DS216j NAS]] for laptop backups and also exposing NFS volumes to my Kubernetes cluster via the [[https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner][nfs-subdir-external-provisioner]]. It regularly backs up to [[https://aws.amazon.com/glacier/][Amazon S3 Glacier]]
- A Raspberry Pi 3b running [[https://pi-hole.net/][Pi-hole]] as a network ad blocker
- 3 Raspberry Pi 4 8Gb forming the Kubernetes cluster

My Home Assistant instance is the brains for all smart home automations. This project is /fantastic/. Mine is connected to:
  - [[https://www.philips-hue.com/en-gb][Philips Hue]] smart lights, switches, and motion sensors
  - [[https://sonoff.tech/product/smart-home-security/zbbridge/][SONOFF ZBBridge]] flashed with [[https://tasmota.github.io/docs/][Tasmota firmware]], acting as a bridge for Zigbee-based devices and connected via WiFi to Home Assistant
  - [[https://sonoff.tech/product/smart-home-security/snzb-02/][SONOFF SNZB-02]] wireless temperature and humidity sensors
  - [[https://sonoff.tech/product/smart-home-security/snzb-04/][SONOFF SNZB-04]] wireless door/window sensors
  - [[https://mosquitto.org/][Eclipse Mosquitto]] MQTT broker, connected to Home Assistant, that devices speaking MQTT can send messages to
  - Xiaomi Mi Flora plant sensors, providing humidity, temperature, light, and conductivity readings over Bluetooth using the Pi's BLE stack
  - [[https://github.com/ThomDietrich/miflora-mqtt-daemon][Mi Flora MQTT Daemon]], a daemon that polls all configured Mi Flora sensors and pushes the results to Mosquitto
  - [[https://www.tp-link.com/uk/home-networking/smart-plug/kp115/][TP-Link Kasa KP115]] smart WiFi plugs to provide both control and energy monitoring of our appliances such as humidifiers
  - Security cameras

The main component that is not yet automated is my underfloor heating - a smart thermostat with zone support is on the list of things to investigate later.

* Network Diagram
  I do not use IPv6 on my home network and all devices currently are on the same VLAN.

  | Range            | Max devices | Description                                 |
  |------------------+-------------+---------------------------------------------|
  | 192.168.1.0/28   |          16 | Networking hardware (Router, switches, APs) |
  | 192.168.1.16/28  |          16 | Infrastructure (DNS, storage, printer)      |
  | 192.168.1.32/28  |          16 | Kubernetes cluster                          |
  | 192.168.1.128/25 |         128 | Gen pop (DHCP range)                        |
  | 192.168.2.0/24   |         254 | Office network                              |
  | 192.168.3.0/24   |         254 | IoT network                                 |
  | 192.168.4.0/24   |         254 | Guest network, all devices isolated         |

  The UDM is the DHCP server and all DHCP advertisements from other clients are blocked.

* Pi-hole configuration
  The Pi-hole uses multiple restriction lists and serves a few LAN DNS entries. It resolves non-blacklisted addresses using a local [[https://www.nlnetlabs.nl/projects/unbound/about/][Unbound]] installation. It is currently running on an 8gb Pi 4B which is much larger than it needs, so I intend to move this into the K3s cluster. I also intend to store its configuration in this repo as I currently have no backup of it.

  This setup lets me have a local DNS cache for fast responses, improves DNS security, and doesn't let Google/OpenDNS/Cloudflare/Quad9 see our DNS queries.

  TODO: Discuss DNSSEC and the benefits of unbound.
  TODO: Move to K3s
  TODO: Look into implementing a Pi-hole module for [[https://github.com/kubernetes-sigs/external-dns/][external-dns]], letting me add custom Pi-hole DNS entries via Kubernetes =Service= objects.
* Notes :noexport:
  TODO: Add notes in case I need to rebuild this from scratch and to help other people:
  - Setting up OpenWRT on the Pi
  - Configuring Pi-hole and Unbound. I used [[https://openwrt.org/toh/raspberry_pi_foundation/raspberry_pi][these docs]]
  - Installing K3s via [[https://github.com/alexellis/k3sup][k3sup]]
  - My Kubernetes cluster
	- Switch setup and IP allocation
	- Power supplies
	- Cooling
  - Ansible configuration for managing the Raspberry Pis

** Notes adding a new Pi to my Kubernetes cluster
   Setting up a new Pi is pretty simple:
   - Use the [Raspberry Pi Imager](https://www.raspberrypi.org/blog/raspberry-pi-imager-imaging-utility/) tool to flash the MicroSD card, connect it to the switch and power up
   - SSH in, change the password
   - Set the hostname (e.g. =k8s-worker-3= in =/etc/hostname=)
   - Update everything (=sudo apt-get update && sudo apt-get upgrade=)
   - Set a static IP in the Kubernetes subnet in the Unifi controller
   - Print out a sticky label and label the network cable with the hostname (lesson learned the hard way)
   - Add ~cgroup_memory=1 cgroup_enable=memory~ to the end of =/boot/firmware/cmdline.txt=
   - Reboot the host (=sudo reboot=)
   - Copy my public key - the new hostname should resolve now (=ssh-copy-id ubuntu@k8s-worker-3=)
   - Add the host to my Ansible inventory in =ansible/home.yml=
   - Run Ansible (=ansible-playbook -i home.yml site.yml=)
   - Run =k3sup=:

   #+begin_src sh
   k3sup join --server-host k8s-master --host k8s-worker-3 --user ubuntu
   #+end_src

   - Watch as the node is joined and the Rancher =system-upgrade-controller= cordons the node and upgrades it to the correct version and uncordons it
** Bluetooth
   =pi-bluetooth= package
https://raspberrypi.stackexchange.com/questions/114586/rpi-4b-bluetooth-unavailable-on-ubuntu-20-04

** Upgrades
   https://rancher.com/docs/k3s/latest/en/upgrades/automated/

   #+begin_src sh
   kubectl apply -f https://github.com/rancher/system-upgrade-controller/releases/download/v0.6.2/system-upgrade-controller.yaml
   #+end_src
